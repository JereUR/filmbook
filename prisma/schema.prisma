// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    String         @id @default(uuid())
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleID              String?        @unique
  avatarUrl             String?
  bio                   String?
  sessions              Session[]
  posts                 Post[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  recievedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  reviews   Review[]
  watchlist Watchlist[]
  diary     Diary[]
  createdAt DateTime    @default(now())

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId String

  follower User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]

  createdAt DateTime @default(now())

  @@map("posts")
}

model Media {
  id     String  @id @default(cuid())
  postId String?

  post Post? @relation(fields: [postId], references: [id], onDelete: SetNull)

  type MediaType
  url  String

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  reviewId String?
  review   Review? @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, reviewId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String  @id @default(uuid())
  recipientId String
  recipient   User    @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User    @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  reviewId String?
  review   Review?          @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  type     NotificationType
  read     Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  REVIEW
}

model Movie {
  id                  String    @id @default(cuid())
  title               String
  backdropPath        String?
  posterPath          String?
  releaseDate         DateTime?
  overview            String?
  runtime             Int?
  voteAverage         Float?
  voteCount           Int?
  productionCompanies Json?
  spokenLanguages     Json?
  productionCountries Json?
  genres              Json?
  directors           Json?
  crew                Json?
  cast                Json?
  recommendations     Json?
  providers           Json?

  rating    MovieRating?
  reviews   Review[]
  watchlist Watchlist[]
  diary     Diary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("movies")
}

model Review {
  id                  String         @id @default(cuid())
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId             String
  movie               Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  rating              Float?
  watched             Boolean        @default(false)
  liked               Boolean        @default(false)
  review              String?
  diary               Diary[]
  likes               Like[]
  linkedNotifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, movieId])
  @@map("reviews")
}

model MovieRating {
  id              String @id @default(cuid())
  movieId         String @unique
  movie           Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  averageRating   Float  @default(0)
  numberOfRatings Int    @default(0)

  createdAt DateTime @default(now())

  @@map("movie_ratings")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
  @@map("watchlist")
}

model Diary {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  reviewId  String?
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: SetNull)
  watchedOn DateTime
  createdAt DateTime @default(now())

  @@unique([userId, movieId, watchedOn])
  @@map("movie_watches")
}
